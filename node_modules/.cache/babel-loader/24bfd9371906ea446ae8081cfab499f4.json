{"ast":null,"code":"var _jsxFileName = \"/home/luis/Desktop/Rvn2/Ravn-Challenge-V2-LuisCaceres/src/components/SideBar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport People from './People';\nimport LoadingCell from './components/LoadingCell';\nimport NoticeCell from './components/NoticeCell';\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PEOPLE = gql`\n  {\n    allPeople {\n      people{\n        id\n      }\n    }\n  }\n\n`;\n\nconst SideBar = ({\n  setSelectedId\n}) => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PEOPLE);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LoadingCell, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(NoticeCell, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.allPeople.people.map((people, id) => /*#__PURE__*/_jsxDEV(People, {\n      className: \"people\",\n      ide: people,\n      setSelectedId: setSelectedId\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SideBar, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = SideBar;\nexport default SideBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"sources":["/home/luis/Desktop/Rvn2/Ravn-Challenge-V2-LuisCaceres/src/components/SideBar.js"],"names":["React","People","LoadingCell","NoticeCell","useQuery","gql","PEOPLE","SideBar","setSelectedId","loading","error","data","allPeople","people","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AAEA,MAAMC,MAAM,GAAGD,GACd;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAaA,MAAME,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqB;AAAA;;AAEjC,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBP,QAAQ,CAACE,MAAD,CAAvC;AAEA,MAAGG,OAAH,EAAY,oBAAQ;AAAA,4BAChB,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADgB,eAEhB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFgB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAKX,MAAGC,KAAH,EAAU,oBAAQ;AAAA,4BACf,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADe,eAEf,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFe;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAMX,sBACI;AAAA,cACKC,IAAI,CAACC,SAAL,CAAeC,MAAf,CAAsBC,GAAtB,CAA0B,CAACD,MAAD,EAAQE,EAAR,kBAC3B,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAoC,MAAA,GAAG,EAAEF,MAAzC;AAAiD,MAAA,aAAa,EAAEL;AAAhE,OAAgCO,EAAhC;AAAA;AAAA;AAAA;AAAA,YADC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAxBD;;GAAMR,O;UAE6BH,Q;;;KAF7BG,O;AA2BN,eAAeA,OAAf","sourcesContent":["import React from 'react'\nimport People from './People'\nimport LoadingCell from './components/LoadingCell'\nimport NoticeCell from './components/NoticeCell'\n\nimport {useQuery, gql} from '@apollo/client';\n\nconst PEOPLE = gql \n`\n  {\n    allPeople {\n      people{\n        id\n      }\n    }\n  }\n\n`\n\n\nconst SideBar = ({setSelectedId}) => {\n\n    const {loading, error, data} = useQuery(PEOPLE);\n\n    if(loading) return (<div>\n        <Header/>\n        <LoadingCell/>  \n     </div>)\n\n     if(error) return (<div>\n        <Header/>\n        <NoticeCell/>  \n     </div>)\n\n\n    return(\n        <div>\n            {data.allPeople.people.map((people,id)=>(\n            <People className='people' key={id} ide={people} setSelectedId={setSelectedId}/>\n      ))}\n        </div>\n        \n      \n      )\n}\n\n\nexport default SideBar;"]},"metadata":{},"sourceType":"module"}