{"ast":null,"code":"var _jsxFileName = \"/home/luis/Desktop/RVN/challenge/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Header from './components/Header';\nimport People from './components/People';\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PEOPLE = gql`\n  {\n    allPeople {\n      people{\n        id\n        name\n        homeworld{\n          name\n        }\n        species{\n          name\n        }\n      }\n    }\n  }\n\n`;\n\nfunction App() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PEOPLE);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 22\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Something wrong\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), data.allPeople.people.map((people, id) => /*#__PURE__*/_jsxDEV(People, {\n      data: people\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/luis/Desktop/RVN/challenge/src/App.js"],"names":["React","Header","People","useQuery","gql","PEOPLE","App","loading","error","data","allPeople","people","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AAEA,MAAMC,MAAM,GAAGD,GACd;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBA,SAASE,GAAT,GAAe;AAAA;;AAEb,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACE,MAAD,CAAvC;AACA,MAAGE,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAGC,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGV,sBACE;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKC,IAAI,CAACC,SAAL,CAAeC,MAAf,CAAsBC,GAAtB,CAA0B,CAACD,MAAD,EAAQE,EAAR,kBAC3B,QAAC,MAAD;AAAiB,MAAA,IAAI,EAAEF;AAAvB,OAAaE,EAAb;AAAA;AAAA;AAAA;AAAA,YADC,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAfQP,G;UAEwBH,Q;;;KAFxBG,G;AAiBT,eAAeA,GAAf","sourcesContent":["import React from 'react';\n\nimport Header from './components/Header';\nimport People from './components/People';\n\nimport {useQuery, gql} from '@apollo/client';\n\nconst PEOPLE = gql \n`\n  {\n    allPeople {\n      people{\n        id\n        name\n        homeworld{\n          name\n        }\n        species{\n          name\n        }\n      }\n    }\n  }\n\n`\n\nfunction App() {\n\n  const {loading, error, data} = useQuery(PEOPLE);\n  if(loading) return <p>Loading..</p>\n  if(error) return <p>Something wrong</p>\n\n\n  return (\n    <div>\n        <Header/>\n        {data.allPeople.people.map((people,id)=>(\n        <People key={id} data={people} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}